<?php

/**
  * @file Effect Magic module
  */

function effect_magic_image_effect_info() {
	$effects = array();

	// The array is keyed on the machine-readable effect name.
	$effects['effect_magic'] = array(
			// Human readable name of the effect.
			'label' => t('Effect Magic'),
			// (optional) Brief description of the effect that will be shown when
			// adding or configuring this image effect. 
			'help' => t('Use ImageMagick to create an effect'),
			// Name of function called to perform this effect. 
			'effect callback' => 'effect_magic_process_effect',
			// (optional) Name of function that provides a $form array with options for
			// configuring the effect. Note that you only need to return the fields
			// specific to your module. Submit buttons will be added automatically, and
			// configuration options will be serailized and added to the 'data' element
			// of the effect. The function will recieve the $effect['data'] array as
			// its only parameter. 
			'form callback' => 'effect_magic_form',
			// (optional) Name of a theme function that will output a summary of this
			// effects configuation. Used when displaying list of effects associated
			// with an image style. In this example the function
			// theme_image_example_colorize_summary will be called via the theme()
			// function. Your module must also implement hook_theme() in order for this
			// function to work correctly. See image_example_theme() and
			// theme_image_example_colorize_summary(). 
			// 'summary theme' => 'image_example_colorize_summary',
			);

	return $effects;
}


function effect_magic_form($data) {
	$form = array();
	$form['im_command'] = array(
			'#type' => 'textarea',
			'#title' => 'Command line.',
			'#description' => 'Source %src will be prepended if not present. Do not put output file.',
			'#default_value' => isset($data['im_command']) ? $data['im_command'] : '',
			'#required' => true,
			);
	return $form;
}

function effect_magic_process_effect($image, $data) {
	/*
	   array(1) { ["im_command"]=> string(2) "xx" }
	   object(stdClass)#324 (4) {
	   ["source"]=> string(24) "modules/image/sample.png"
	   ["info"]=> array(5) {
				   ["width"]=> int(170)
				   ["height"]=> int(130)
				   ["extension"]=> string(3) "png"
				   ["mime_type"]=> string(9) "image/png"
				   ["file_size"]=> int(168110)
	   }
	   ["toolkit"]=> string(2) "gd"
	   ["resource"]=> resource(325) of type (gd)
	   }
	*/

	// first, save the 'resource' out to a file
	$img=tempnam('/tmp','em_');
	$img_src= "$img.png";
	// destination will have same format as src
	$img_dst= $img . "_." . $image->info['extension'];
	image_save($image, $img_src);

	// now invoke command
	$parts = preg_split('/(?<!\\\)\s+/', trim($data['im_command']));

	// must reference source image
	if (!in_array('%src', $parts)) array_unshift($parts, '%src');

	foreach ($parts as &$_) {
		if ($_ == '%src') $_ = $img_src;
		if ($_ == '-quality') $quality = true;
	}

	// if user has not specified jpeg quality, let's do that for them...
	if (!isset($quality) && preg_match('/jpe?g/i',$image->info['extension']) ) {
		$parts[] = '-quality';
		$parts[] = '100'; // let us not be responsible for losing detail!
	}
	$parts[] = $img_dst;

	foreach ($parts as &$_) $_ = escapeshellarg($_);


	$cmd = "convert " .implode(' ', $parts);
	exec($cmd, $output, $return);
	if ($return=='0')
	{
		// drupal has other references to this object
		// which means that updating OUR pointer to the image
		// won't affect the one Drupal uses. So we have to 
		// do the following:
		$new_image =  image_load($img_dst, $image->toolkit);
		$image->info = $new_image->info;
		$image->resource = $new_image->resource;
		$return=true;
	}
	else $return = false;

	unlink($img);
	unlink($img_src);
	unlink($img_dst);

	return $return;
}
